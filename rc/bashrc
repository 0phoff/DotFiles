# Only source bashrc on interactive prompts
[[ $- != *i* ]] && return

# Set Prompt
precmd() {
  if [ -n "$TMUX" ]; then
    tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD"
  fi
}
compile_prompt() {
  local CONNECTBAR_DOWN=$'\u250C\u2500\u257C'
  local CONNECTBAR_UP=$'\u2514\u2500\u257C'
  local SPLITBAR=$'\u257E\u2500\u257C'
  local c_gray='\[\e[01;30m\]'
  local c_blue='\[\e[0;34m\]'
  local c_purple='\[\e[0;35m\]'
  local c_reset='\[\e[0m\]'

  # > Connectbar Down
  # Format:   (connectbar down)
  PS1="${c_gray}$CONNECTBAR_DOWN"

  # > Username
  # Format:   (bracket open)(username)(bracket close)
  PS1+="[${c_blue}\u${c_gray}]"

  # > Python Virtual Environment
  # Format:   (bracket open)(virtualenv)(bracket close)
  if [[ -n "$VIRTUAL_ENV" ]]; then
    PS1+="[${c_purple}${VIRTUAL_ENV##*/}${c_gray}]"
  fi

  # > Working Directory
  # Format:   (splitbar)(bracket open)(working directory)(bracket close)(newline)(connectbar up)
  PS1+="$SPLITBAR"
  PS1+="[${c_blue}\w${c_gray}]\n"
  PS1+="${c_gray}$CONNECTBAR_UP "

  # Color reset
  PS1+="${c_reset}"
}

PROMPT_COMMAND="precmd;compile_prompt;$PROMPT_COMMAND"

# Set Environment variables
export EDITOR="vim"
export PAGER="less"

# Set Custom Aliases
alias ls="ls --color"
alias ll="ls -Al"
alias lx="ls -AgohX"
alias vim="nvim"
alias top="vtop --theme wizard"
alias grep="grep --color"
alias dev=". .startup.sh"

alias mediaserve="minidlnad -f /home/ophoff/.config/minidlna/minidlna.conf -P /home/ophoff/.config/minidlna/minidlna.pid -r"
alias mediakill="pkill minidlnad"

alias mdserve="sudo -E grip 80 &>/dev/null"
alias mdkill="sudo -E pkill grip"

alias catkin_make="catkin_make -DPYTHON_EXECUTABLE=/usr/bin/python2 -DPYTHON_INCLUDE_DIR=/usr/include/python2.7 -DPYTHON_LIBRARY=/usr/lib/libpython2.7.so"
alias rosinit="source rosinit.sh"

alias no-tmux="exec xfce4-terminal -e 'env NO_TMUX=1 bash'"

# Custom Alias Functions
## Executes sudo -E for nvim so it loads with user config and not root config
## Otherwise behaves like regular sudo command
sudo() {
    if [[ $1 == "vim" ]] || [[ $1 == "nvim" ]]; then
        command sudo -E nvim "${@:2}"
    else
        command sudo "$@"
    fi
}
## tks       => tmux kill-server
## tks -a    => tmux kill-session -a
## tks 1     => tmux kill-session -t 1
tks() {
    if [ -z ${1+x} ]; then
        tmux kill-server
    else
        [ ${1:0:1} == "-" ] && tmux kill-session $1 || tmux kill-session -t $1
    fi
}
## Docker: clean <none> images
dockerclean() {
    #containers=$(docker ps -q -f "status=exited" | tr '\n' ' ')
    #if [ ! -z ${containers// } ]; then
    #    echo -e "\e[01mDeleting containers:\e[00m"
    #    docker rm $containers
    #fi

    images=$(docker images -q -f "dangling=true" | tr '\n' ' ')
    if [ ! -z ${images// } ]; then
        echo -e "\e[01mDeleting images:\e[00m"
        docker rmi $images
    fi
}
tmux() {
    local tmux=$(type -fp tmux)
    case "$1" in
        update-environment|update-env|env-update)
            local v
            while read v; do
                if [[ $v == -* ]]; then
                    unset ${v/#-/}
                else
                    # Add quotes around the argument
                    v=${v/=/=\"}
                    v=${v/%/\"}
                    eval export $v
                fi
            done < <(tmux show-environment)
            ;;
        *)
            $tmux "$@"
            ;;
    esac
}

# ROS Settings
if [ -f /opt/ros/kinetic/setup.bash ]; then
    source /opt/ros/kinetic/setup.bash
    
    if [ -n "$ROSSETUP" ]; then
        source "$ROSSETUP"
    fi
fi

if [ -f ~/.dir_colors ]; then
    eval "$(dircolors ~/.dir_colors)"
fi

# Python virutalenvwrapper
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    export VIRTUAL_ENV_DISABLE_PROMPT=1
    if [ -f /usr/local/bin/virtualenvwrapper_lazy.sh ]; then
        export VIRTUALENVWRAPPER_SCRIPT=/usr/local/bin/virtualenvwrapper.sh
        source /usr/local/bin/virtualenvwrapper_lazy.sh
    else
        source /usr/local/bin/virtualenvwrapper.sh
    fi
fi

# Start Bash with TMUX
if [ -z "$SSH_CONNECTION" ] && [ -z "$NO_TMUX" ]; then
    if command -v tmux>/dev/null; then
        if [[ -z "$TMUX" ]]; then
            tmux has -t random && exec tmux attach -t random || exec tmux
        fi
    fi
fi

