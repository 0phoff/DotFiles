# Scripts
# -------
source "%val{config}/scripts/theme/theme.kak"
source "%val{config}/scripts/usermodes.kak"


# Settings
# --------
set-option global scrolloff 1,3
set-option global autocomplete prompt
set-option global ui_options terminal_status_on_top=true terminal_enable_mouse=true terminal_assistant=none

set-option global tabstop 4
set-option global indentwidth 4

add-highlighter global/ number-lines -hlcursor -relative -separator " "
add-highlighter global/ show-matching


# Plugins
# -------
evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload

plug-chain \
plug 'kakounedotcom/prelude.kak' \
plug 'kakounedotcom/connect.kak' do %{
    make install
} defer tmux %{
    define-command tmux-terminal-popup -params 1.. -shell-completion \
        -docstring 'tmux-terminal-popup <program> [<arguments>]: create a new popup terminal' \
    %{
        evaluate-commands %sh{
            tmux=${kak_client_env_TMUX:-$TMUX}
            tmux_args="display-popup -E -w 80% -h 80%"

            if [ -n "$TMPDIR" ]; then
                TMUX=$tmux tmux $tmux_args env TMPDIR="$TMPDIR" "$@" < /dev/null > /dev/null 2>&1 &
            else
                TMUX=$tmux tmux $tmux_args "${@}" < /dev/null > /dev/null 2>&1 &
            fi
        }
    }
    
    alias global popup tmux-terminal-popup
} config %{
    source "%val{config}/scripts/connect/connect.kak"
    map global user f ': require-module connect-custom-fzf<ret>: enter-user-mode fzf<ret>' -docstring 'FZF'
} \
plug "andreyorst/smarttab.kak" config %{
    source "%val{config}/scripts/smarttab-editorconfig.kak"

    # Default to editorconfig or expandtab
    hook global WinSetOption filetype=.* %{ smarttab-editorconfig expandtab }
    
    # Force specific modes
    hook global WinSetOption filetype=(makefile) noexpandtab

    # Force specific mode unless editorconfig
    hook global WinSetOption filetype=(c|cpp|typescript|javascript) %{ smarttab-editorconfig smarttab }
} defer smarttab %{
    set-option global softtabstop 4
    set-option global smarttab_default true
}
